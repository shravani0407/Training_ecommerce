package com.wu.ecommerce.repo;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.wu.ecommerce.dto.Product;
import com.wu.ecommerce.exception.DataNotFoundExeption;

public class ProductRepositoryImpl implements ProductRepository {
	
	private ProductRepositoryImpl() {
		// TODO Auto-generated constructor stub
	}
//	private Product[] products = new Product[10];
	
	private static ProductRepository productRepository;
	
	private static int counter = -1;

	public static ProductRepository getInstance() {
		if(productRepository == null) {
			//create the object
			productRepository = new ProductRepositoryImpl();
		}
		return productRepository;
	}
	
	private ArrayList<Product> products = new ArrayList<Product>();
	public Product addProduct(Product product) {
		// TODO Auto-generated method stub
//		if(counter >= products.length-1) {
//			Product temp[] = new Product[products.length * 2];
//			System.arraycopy(products, 0, temp, 0, products.length);
//			products = temp;			
//		}
//		products[++counter] = product;
//		
//		return product;
		
		boolean result = products.add(product);
		if (result) {
			return product;
		}
		else {
			return null;
		}
		
		
	}

	public Optional<Product> getProductById(String id) {
		// TODO Auto-generated method stub
		Product p = null;
//		for (Product product : products) {
//			if(product.getProductId().equals(id) && product != null) {
//				return Optional.of(product);
//			}
//		}
		return products.stream().filter(e->e.getProductId().equals(id))
				.findFirst();
	}

	public List<Product> getProducts() throws DataNotFoundExeption {
		// TODO Auto-generated method stub
		
		return Optional.ofNullable(products).filter(l->l.isEmpty()).orElseThrow(() -> new DataNotFoundExeption("Data is not present."));
	
	}

	public Optional<Product[]> getAllProductsByCategory(String cat) {
		
		//products.stream().filter(e->e.getCategoryName().equals(cat)).toList();           to list is available from java version 16
		
		products.stream().filter(e->e.getCategoryName().equals(cat)).collect(Collectors.toList());
		
		return null;
	}

	public String removeProductByProductId(String id) {
		// TODO Auto-generated method stub
		return null;
	}

	public Product updateProductByProductId(String id, Product product) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<Product> getEmployeeByProductId(String id) {
		// TODO Auto-generated method stub
		return null;
	}

}
